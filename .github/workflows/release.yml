name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'LexemeExtractor/LexemeExtractor.csproj'

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest
            rid: win-x64
            artifact_name: LexemeExtractor-windows-x64
            executable_extension: .exe
          # Linux builds
          - os: linux
            arch: x64
            runner: ubuntu-latest
            rid: linux-x64
            artifact_name: LexemeExtractor-linux-x64
            executable_extension: ''
          # macOS builds
          - os: macos
            arch: x64
            runner: macos-13  # Intel-based runner
            rid: osx-x64
            artifact_name: LexemeExtractor-macos-x64
            executable_extension: ''
          - os: macos
            arch: arm64
            runner: macos-latest  # Apple Silicon runner
            rid: osx-arm64
            artifact_name: LexemeExtractor-macos-arm64
            executable_extension: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang zlib1g-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos'
      run: |
        # Ensure Xcode command line tools are available
        xcode-select --install 2>/dev/null || true

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build and publish (Windows)
      if: matrix.os == 'windows'
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --runtime ${{ matrix.rid }} --self-contained true --output ./publish/${{ matrix.artifact_name }}

    - name: Build and publish (Unix)
      if: matrix.os != 'windows'
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime ${{ matrix.rid }} \
          --self-contained true \
          --output ./publish/${{ matrix.artifact_name }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows'
      run: |
        cd publish
        Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.artifact_name }}.zip

    - name: Create archive (Unix)
      if: matrix.os != 'windows'
      run: |
        cd publish
        tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          publish/${{ matrix.artifact_name }}.zip
          publish/${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Determine release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        ## LexemeExtractor ${{ steps.version.outputs.version }}

        Cross-platform AOT compiled binaries for LexemeExtractor.

        ### Features
        - Command-line lexeme file processing with glob pattern support
        - Multiple output formats: text, JSON, CSV, XML
        - Comprehensive help system (`--help`, `-h`)
        - Version information (`--version`, `-v`)
        - Native AOT compilation - no .NET runtime required
        - Graceful error handling with helpful guidance

        ### Available Platforms
        - **Windows x64**: LexemeExtractor-windows-x64.zip
        - **Linux x64**: LexemeExtractor-linux-x64.tar.gz
        - **macOS x64**: LexemeExtractor-macos-x64.tar.gz
        - **macOS ARM64**: LexemeExtractor-macos-arm64.tar.gz

        ### Installation
        1. Download the appropriate archive for your platform
        2. Extract the archive
        3. Run the executable directly (no .NET runtime required)

        ### Usage
        ```bash
        # Get help
        LexemeExtractor --help

        # Process files
        LexemeExtractor "*.lexemes"
        LexemeExtractor "data/*.lex" --format json

        # Pipe input
        cat file.lexemes | LexemeExtractor --format csv
        ```

        ### Technical Details
        - Built with .NET 9.0 Native AOT
        - Cross-platform compilation via GitHub Actions
        - Self-contained executables with no dependencies
        EOF

    - name: Create Release
      run: |
        gh release create ${{ steps.version.outputs.version }} \
          --title "LexemeExtractor ${{ steps.version.outputs.version }}" \
          --notes-file release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      run: |
        # Upload all archives to the release
        find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
          echo "Uploading $file"
          gh release upload ${{ steps.version.outputs.version }} "$file" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
